// Pascal script for "Town Tutorial"
//
// Notice:
//   This file was made for teaching players the basics of Knights Province.
//
// Current map version: 1.0.6
// Designed for: Knights Province Alpha 8
//

type TObjectiveStates = record
  Done: Boolean;
  ID:   Integer;
end;

type TObjectiveSuccess = record
  // Training
  School:              TObjectiveSuccess;
  // Blanks
  Cottage, Blanks:     TObjectiveSuccess;
  // Basic supplies
  Stone, Wood, Planks: TObjectiveSuccess;
  // Food
  Fish, Cider, Tavern: TObjectiveSuccess;
  // Store
  Store:               TObjectiveSuccess;
end;

type TSquare = record
  topLeft, topRight:       Integer;
  bottomLeft, bottomRight: Integer;
end;

var
  objSuccess:  TObjectiveSuccess;
  fDiscovered: Boolean;

procedure ShowMessage(aMsgIndex: Integer);
begin
  if aMsgIndex = 100 then
    fSecretDiscovered := True;

  Actions.OverlayTextSet(0, '<$' + IntToStr(aMsgIndex) + '>');
end;

procedure CheckVictory;
begin
  if objSuccess.School.Done  and
     objSuccess.Cottage.Done and
     objSuccess.Blanks.Done  and
     objSuccess.Stone.Done   and
     objSuccess.Wood.Done    and
     objSuccess.Planks.Done  and
     objSuccess.Fish.Done    and
     objSuccess.Cider.Done   and
     objSuccess.Tavern.Done  and
     objSuccess.Store.Done   then
  begin
    Actions.PlayerWin([0], True);

    // Re-enable construction of tutorial buildings
    Actions.HouseAllow(0,  htSchool,       true);
    Actions.HouseAllow(0,  htCottage,      true);
    Actions.HouseAllow(0,  htStonecutters, true);
    Actions.HouseAllow(0,  htWoodcutters,  true);
    Actions.HouseAllow(0,  htSawmill,      true);
    Actions.HouseAllow(0,  htFisherHut,    true);
    Actions.HouseAllow(0,  htCiderMaker,   true);
    Actions.HouseAllow(0,  htTavern,       true);
    Actions.HouseAllow(0,  htStore,        true);
  end;
end;

procedure UpdateObjectivesStatus;
begin
  // Training
  if (objSuccess.School.ID <> -1) and States.PlayerHouseCanBuild(0, htSchool) then
    Actions.PlayerObjectiveUpdateStatus(0, objSuccess.School.ID, osActive);

  // Blanks
  if (objSuccess.Cottage.ID <> -1) and States.PlayerHouseCanBuild(0, htCottage)      and
                                       (States.StatHouseTypeCount(0, htSchool) >= 1) then
    Actions.PlayerObjectiveUpdateStatus(0, objSuccess.Cottage.ID, osActive);

  if (objSuccess.Blanks.ID <> -1) and (States.StatHouseTypeCount(0, htSchool)  >= 1) and
                                      (States.StatHouseTypeCount(0, htCottage) >= 2) then
    Actions.PlayerObjectiveUpdateStatus(0, objSuccess.Blanks.ID, osActive);

  // Basic supplies
  if (objSuccess.Stone.ID <> -1) and States.PlayerHouseCanBuild(0, htStonecutters)  and
                                     (States.StatHouseTypeCount(0, htCottage) >= 2) and
                                     (States.StatUnitTypeCount(0, utBlank)    >= 5) then
    Actions.PlayerObjectiveUpdateStatus(0, objSuccess.Stone.ID, osActive);

  if (objSuccess.Wood.ID <> -1) and States.PlayerHouseCanBuild(0, htWoodcutters)        and
                                    (States.StatHouseTypeCount(0, htStonecutters) >= 2) then
    Actions.PlayerObjectiveUpdateStatus(0, objSuccess.Wood.ID, osActive);

  if (objSuccess.Planks.ID <> -1) and States.PlayerHouseCanBuild(0, htSawmill)            and
                                      (States.StatHouseTypeCount(0, htWoodcutters) >= 2) then
    Actions.PlayerObjectiveUpdateStatus(0, objSuccess.Planks.ID, osActive);

  // Food
  if (objSuccess.Fish.ID <> -1) and States.PlayerHouseCanBuild(0, htFisherHut)     and
                                    (States.StatHouseTypeCount(0, htSawmill) >= 1) then
    Actions.PlayerObjectiveUpdateStatus(0, objSuccess.Fish.ID, osActive);

  if (objSuccess.Cider.ID <> -1) and States.PlayerHouseCanBuild(0, htCiderMaker)      and
                                     (States.StatHouseTypeCount(0, htFisherHut) >= 1) then
    Actions.PlayerObjectiveUpdateStatus(0, objSuccess.Cider, osActive);

  if (objSuccess.Tavern.ID <> -1) and States.PlayerHouseCanBuild(0, htTavern)           and
                                      (States.StatHouseTypeCount(0, htCiderMaker) >= 1) then
    Actions.PlayerObjectiveUpdateStatus(0, objSuccess.Tavern, osActive);

  // Store
  if (objSuccess.Store.ID <> -1) and States.PlayerHouseCanBuild(0, htStore)        and
                                     (States.StatHouseTypeCount(0, htTavern) >= 1) then
    Actions.PlayerObjectiveUpdateStatus(0, objSuccess.Store, osActive);
end;

procedure CheckObjectives;
begin
  // Training
  if (States.StatHouseTypeCount(0, htSchool) >= 1) and not objSuccess.School.Done then
  begin
    Actions.PlayerObjectiveUpdateStatus(0, objSuccess.School.ID, osCompleted);
    objSuccess.School.ID   := -1;
    objSuccess.School.Done := True;

    ShowMessage(1);
    Actions.HouseAllow(0, htSchool,  False);
    Actions.HouseAllow(0, htCottage, True);
  end;

  // Blanks
  if (States.StatHouseTypeCount(0, htCottage) >= 2) and not objSuccess.Cottage.Done then
  begin
    Actions.PlayerObjectiveUpdateStatus(0, objSuccess.Cottage.ID, osCompleted);
    objSuccess.Cottage.ID   := -1;
    objSuccess.Cottage.Done := True;

    Actions.HouseAllow(0, htCottage, False)
  end;

  if (States.StatUnitTypeCount(0, utBlank) >= 5) and not objSuccess.Blanks.Done then
  begin
    Actions.PlayerObjectiveUpdateStatus(0, objSuccess.Blanks.ID, osCompleted);
    objSuccess.Blanks.ID   := -1;
    objSuccess.Blanks.Done := True;

    ShowMessage(2);
    Actions.HouseAllow(0, htStonecutters, True);
  end;

  // Basic supplies
  if (States.StatHouseTypeCount(0, htStonecutters) >= 2) and not objSuccess.Stone.Done then
  begin
    Actions.PlayerObjectiveUpdateStatus(0, objSuccess.Stone.ID, osCompleted);
    objSuccess.Stone.ID   := -1;
    objSuccess.Stone.Done := True;

    ShowMessage(3);
    Actions.HouseAllow(0, htStonecutters, False);
    Actions.HouseAllow(0, htWoodcutters,  True);
  end;

  if (States.StatHouseTypeCount(0, htWoodcutters) >= 2) and not objSuccess.Wood.Done then
  begin
    Actions.PlayerObjectiveUpdateStatus(0, objSuccess.Wood.ID, osCompleted);
    objSuccess.Wood.ID   := -1;
    objSuccess.Wood.Done := True;

    ShowMessage(4);
    Actions.HouseAllow(0, htWoodcutters, False);
    Actions.HouseAllow(0, htSawmill,     True);
  end;

  if (States.StatHouseTypeCount(0, htSawmill) >= 1) and not objSuccess.Planks.Done then
  begin
    Actions.PlayerObjectiveUpdateStatus(0, objSuccess.Planks.ID, osCompleted);
    objSuccess.Planks.ID   := -1;
    objSuccess.Planks.Done := True;

    ShowMessage(5);
    Actions.HouseAllow(0, htSawmill,   False);
    Actions.HouseUnlock(0, htFisherHut);
    Actions.HouseAllow(0, htFisherHut, True);
  end;

  // Food
  if (States.StatHouseTypeCount(0, htFisherHut) >= 1) and not objSuccess.Fish.Done then
  begin
    Actions.PlayerObjectiveUpdateStatus(0, objSuccess.Fish.ID, osCompleted);
    objSuccess.Fish.ID   := -1;
    objSuccess.Fish.Done := True;

    Actions.HouseAllow(0, htFisherHut,  False);
    Actions.HouseAllow(0, htCiderMaker, True);
  end;

  if (States.StatHouseTypeCount(0, htCiderMaker) >= 1) and not objSuccess.Cider.Done then
  begin
    Actions.PlayerObjectiveUpdateStatus(0, objSuccess.Cider.ID, osCompleted);
    objSuccess.Cider.ID   := -1;
    objSuccess.Cider.Done := True;

    ShowMessage(6);
    Actions.HouseAllow(0, htCiderMaker, False);
    Actions.HouseAllow(0, htTavern,     True);
  end;

  if (States.StatHouseTypeCount(0, htTavern) >= 1) and not objSuccess.Tavern.Done then
  begin
    Actions.PlayerObjectiveUpdateStatus(0, objSuccess.Tavern.ID, osCompleted);
    objSuccess.Tavern.ID   := -1;
    objSuccess.Tavern.Done := True;

    Actions.HouseAllow(0, htTavern, False);
    Actions.HouseAllow(0, htStore,  True);
  end;

  // Store
  if (States.StatHouseTypeCount(0, htStore) >= 1) and not objSuccess.Store.Done then
  begin
    Actions.PlayerObjectiveUpdateStatus(0, objSuccess.Store.ID, osCompleted);
    objSuccess.Store.ID   := -1;
    objSuccess.Store.Done := True;

    ShowMessage(7);
    Actions.HouseAllow(0, htStore, False);
  end;
end;

procedure CheckSquare;
var
  unitsInSquare: TSquare;
begin
  if (not fSecretDiscovered) and (aTick mod 10 = 3)then
  begin
    unitsInSquare.topLeft     := States.UnitAt(61, 61);
    unitsInSquare.topRight    := States.UnitAt(62, 61);
    unitsInSquare.bottomLeft  := States.UnitAt(61, 62);
    unitsInSquare.bottomRight := States.UnitAt(62, 62);

    if (unitsInSquare.topLeft     <> -1) or
       (unitsInSquare.topRight    <> -1) or
       (unitsInSquare.bottomLeft  <> -1) or
       (unitsInSquare.bottomRight <> -1)) then
      ShowMessage(100);
  end;
end;

// Disable construction of the houses used during this map,
// except for the first objective's house
procedure BlockHouses;
begin
  Actions.HouseAllow(0, htCottage,      false);
  Actions.HouseAllow(0, htStonecutters, false);
  Actions.HouseAllow(0, htWoodcutters,  false);
  Actions.HouseAllow(0, htSawmill,      false);
  Actions.HouseAllow(0, htFisherHut,    false);
  Actions.HouseAllow(0, htCiderMaker,   false);
  Actions.HouseAllow(0, htTavern,       false);
  Actions.HouseAllow(0, htStore,        false);
end;

// Initialize the objectives
procedure SetMissionStartValues;
begin
  // Training
  objSuccess.School.ID  := Actions.PlayerObjectiveAdd(0, otMain, 1,  osHidden, '<$20>');
  // Blanks
  objSuccess.Cottage.ID := Actions.PlayerObjectiveAdd(0, otMain, 2,  osHidden, '<$21>');
  objSuccess.Blanks.ID  := Actions.PlayerObjectiveAdd(0, otMain, 3,  osHidden, '<$22>');
  // Basic supplies
  objSuccess.Stone.ID   := Actions.PlayerObjectiveAdd(0, otMain, 4,  osHidden, '<$23>');
  objSuccess.Wood.ID    := Actions.PlayerObjectiveAdd(0, otMain, 5,  osHidden, '<$24>');
  objSuccess.Planks.ID  := Actions.PlayerObjectiveAdd(0, otMain, 6,  osHidden, '<$25>');
  // Food
  objSuccess.Fish.ID    := Actions.PlayerObjectiveAdd(0, otMain, 7,  osHidden, '<$26>');
  objSuccess.Cider.ID   := Actions.PlayerObjectiveAdd(0, otMain, 8,  osHidden, '<$27>');
  objSuccess.Tavern.ID  := Actions.PlayerObjectiveAdd(0, otMain, 9,  osHidden, '<$28>');
  // Store
  objSuccess.Store.ID   := Actions.PlayerObjectiveAdd(0, otMain, 10, osHidden, '<$29>');
end;

procedure OnMissionStart;
begin
  BlockHouses;
  SetMissionStartValues;
  UpdateObjectivesStatus;

  ShowMessage(0);
end;

procedure OnTick(aTick: Integer);
begin
  if not States.PlayerVictorious(0) then
  begin
    if aTick mod 10 = 0 then
      UpdateObjectivesStatus;

    if aTick mod 10 = 3 then
      CheckObjectives;

    if aTick mod 10 = 6 then
      CheckVictory;

    if aTick mod 10 = 9 then
      CheckSquare;
  end;
end;
